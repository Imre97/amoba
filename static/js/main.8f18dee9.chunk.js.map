{"version":3,"sources":["components/Cell.jsx","components/Row.jsx","App.js","index.js"],"names":["Cell","item","handleCellClick","rowindex","columnindex","className","onClick","Row","row","rowIndex","handlecellclick","cells","map","cellValue","i","App","useState","Array","fill","board","setBoard","xIsNext","setXIsNext","playerOne","setPlayerOne","playerTwo","setPlayerTwo","playerOneMark","setPlayerOneMark","playerTwoMark","setPlayerTwoMark","playerOneEl","useRef","playerTwoEl","playerOneMarkEl","playerTwoMarkEl","winner","j","CalculateWinner","winnerName","column","boardCopy","alert","Table","type","placeholder","onChange","current","value","ref","maxLength","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f18dee9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Cell({ item, handleCellClick, rowindex, columnindex }) {\r\n\r\n    const handleClick = () => {\r\n        handleCellClick(rowindex, columnindex)\r\n    }\r\n\r\n    return (\r\n        <div className='cell-item' onClick={handleClick}>\r\n            {item}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Cell from './Cell'\r\n\r\nexport default function Row({ row, rowIndex, handlecellclick }) {\r\n\r\n    const cells = row.map((cellValue, i) => (\r\n        <Cell\r\n            item={cellValue}\r\n            key={i}\r\n            rowindex={rowIndex}\r\n            columnindex={i}\r\n            handleCellClick={handlecellclick}\r\n        />\r\n    ))\r\n\r\n    return (\r\n        <div className='row-item' >\r\n            {cells}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useRef } from 'react'\nimport './App.css'\nimport Row from './components/Row'\n\nfunction App() {\n\n  const [board, setBoard] = useState(Array(10).fill(null).map(() => Array(10).fill('X')))\n  const [xIsNext, setXIsNext] = useState(true)\n  const [playerOne, setPlayerOne] = useState('')\n  const [playerTwo, setPlayerTwo] = useState('')\n  const [playerOneMark, setPlayerOneMark] = useState('')\n  const [playerTwoMark, setPlayerTwoMark] = useState('')\n\n  const playerOneEl = useRef()\n  const playerTwoEl = useRef()\n\n  const playerOneMarkEl = useRef()\n  const playerTwoMarkEl = useRef()\n\n\n  const CalculateWinner = () => {\n    //check rows\n    for(let i = 0; i <= 9; i++){\n      for(let j = 0; j <= 6; j++){\n        if(board[i][j] && board[i][j] === board[i][j+1] && board[i][j] === board[i][j+2] && board[i][j] === board[i][j+3] && board[i][j] === board[i][j+4]){\n          return board[i][j]\n        }\n      }\n    }\n    //check columns\n    for(let i = 0; i <=5; i++){\n      for(let j = 0; j <= 9; j++){\n        if(board[i][j] && board[i][j] === board[i+1][j] && board[i][j] === board[i+2][j] && board[i][j] === board[i+3][j] && board[i][j] === board[i+4][j]){\n          return board[i][j]\n        }\n      }\n    }\n    //check top left to rigth bottom\n    for(let i = 0; i <= 5; i++){\n      for(let j = 0; j <= 5; j++){\n        if(board[i][j] && board[i][j] === board[i+1][j+1] && board[i][j] === board[i+2][j+2] && board[i][j] === board[i+3][j+3] && board[i][j] === board[i+4][j+4]){\n          return board[i][j]\n        }\n      }\n    }\n    //check top rigth to left bottom\n    for(let i = 5; i>=0; i--){\n      for(let j = 9; j >= 0; j--){\n        if(board[i][j] && board[i][j] === board[i+1][j-1] && board[i][j] === board[i+2][j-2] && board[i][j] === board[i+3][j-3] && board[i][j] === board[i+4][j-4]){\n          return board[i][j]\n        }\n      }\n    }\n    return null\n  }\n\n\n  const winner = CalculateWinner(board)\n\n  const  checkWinnerName = () => {\n    if(winner === playerOneMark){\n      return playerOne\n    }else {\n      return playerTwo\n    }\n  }\n\n  const winnerName = checkWinnerName(winner)\n\n  const handleCellClick = (row, column) => {\n\n\n    if(winner) return\n\n    const boardCopy = [...board]\n\n\n    if (boardCopy[row][column]){\n      alert('Ez a cella foglalt')\n      return\n    }\n\n    boardCopy[row][column] = xIsNext ? (playerOneMark ? playerOneMark : 'X') : (playerTwoMark ? playerTwoMark : 'O')\n\n    setBoard(boardCopy)\n\n    setXIsNext(!xIsNext)\n\n  }\n\n  const newGame = () => {\n    \n    if(playerOne === '' || playerTwo === ''){\n      alert('Add meg a neved')\n      return\n    } else if(playerOne === playerTwo){\n      alert('Nem egyezhet a két név')\n      return\n    }\n    setBoard(Array(10).fill(null).map(() => Array(10).fill(null)))\n    setXIsNext(true)\n  }\n\n  const Table = board.map((row, i) => (\n    <Row row={row} key={i} rowIndex={i} handlecellclick={handleCellClick}/>\n  ))\n\n  return (\n    <div className=\"container\">\n      <div>\n        <div className='playerone_container'>\n          <h2>Player one</h2>\n          <input type='text' placeholder='neved' onChange={() => {setPlayerOne(playerOneEl.current.value)}}  ref={playerOneEl} />\n          <input type='text'maxLength='1' placeholder='jeled' onChange={() => {setPlayerOneMark(playerOneMarkEl.current.value)}} ref={playerOneMarkEl} />\n        </div>\n        <div className='playertwo_container' >\n          <h2>Player two</h2>\n          <input type='text' placeholder='neved' onChange={() => {setPlayerTwo(playerTwoEl.current.value)}}  ref={playerTwoEl} />\n          <input type='text' maxLength='1' placeholder='jeled' onChange={() => {setPlayerTwoMark(playerTwoMarkEl.current.value)}} ref={playerTwoMarkEl} />\n        </div>        \n        <button onClick={newGame}>Új játék</button>\n      </div>\n      <div className='table-container' >\n        {Table}\n      </div>\n      <p>\n        {winner ? 'winner: ' + winnerName : 'Next player: ' + (xIsNext ? playerOne : playerTwo)}\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}